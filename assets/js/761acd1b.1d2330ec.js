"use strict";(self.webpackChunkdosimpact_blog=self.webpackChunkdosimpact_blog||[]).push([[8767],{3905:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>k});var r=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=r.createContext({}),c=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},d=function(n){var e=c(n.components);return r.createElement(l.Provider,{value:e},n.children)},u="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,l=n.parentName,d=o(n,["components","mdxType","originalType","parentName"]),u=c(t),m=a,k=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return t?r.createElement(k,s(s({ref:e},d),{},{components:t})):r.createElement(k,s({ref:e},d))}));function k(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=n,o[u]="string"==typeof n?n:a,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},31156:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const i={sidebar_position:3},s="3.Qdrant Quick Start - 2",o={unversionedId:"g-be/qdrant/qdrant-basic/qdrant-basic-3",id:"g-be/qdrant/qdrant-basic/qdrant-basic-3",title:"3.Qdrant Quick Start - 2",description:"- 3.Qdrant Quick Start - 2",source:"@site/docs/g-be/6-qdrant/1-qdrant-basic/qdrant-basic-3.md",sourceDirName:"g-be/6-qdrant/1-qdrant-basic",slug:"/g-be/qdrant/qdrant-basic/qdrant-basic-3",permalink:"/docs/g-be/qdrant/qdrant-basic/qdrant-basic-3",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/g-be/6-qdrant/1-qdrant-basic/qdrant-basic-3.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"backEnd",previous:{title:"2.Qdrant Quick Start",permalink:"/docs/g-be/qdrant/qdrant-basic/qdrant-basic-2"}},l={},c=[{value:"Index",id:"index",level:2},{value:"Filtering - Advanced",id:"filtering---advanced",level:2},{value:"Filtering - Full Text",id:"filtering---full-text",level:2},{value:"Multivector Search",id:"multivector-search",level:2},{value:"Sparse Vector Search",id:"sparse-vector-search",level:2},{value:"Hybrid Search",id:"hybrid-search",level:2}],d={toc:c},u="wrapper";function p(n){let{components:e,...t}=n;return(0,a.kt)(u,(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"3qdrant-quick-start---2"},"3.Qdrant Quick Start - 2"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#3qdrant-quick-start---2"},"3.Qdrant Quick Start - 2"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#index"},"Index")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#filtering---advanced"},"Filtering - Advanced")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#filtering---full-text"},"Filtering - Full Text")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#multivector-search"},"Multivector Search")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#sparse-vector-search"},"Sparse Vector Search")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#hybrid-search"},"Hybrid Search"))))),(0,a.kt)("h2",{id:"index"},"Index"),(0,a.kt)("p",null,"Setup Guide"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Quickstart - Create a collection, upsert vectors, and run a search."),(0,a.kt)("li",{parentName:"ul"},"Load Data - Load a prepared dataset snapshot into your collection.")),(0,a.kt)("p",null,"Vector Search"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Filtering - Beginner - Filter search results using basic payload conditions."),(0,a.kt)("li",{parentName:"ul"},"Filtering - Advanced - Try advanced filtering based on nested payload conditions."),(0,a.kt)("li",{parentName:"ul"},"Filtering - Full Text - Search for substrings, tokens, or phrases within text fields."),(0,a.kt)("li",{parentName:"ul"},"Multivector Search - Work with data represented by ColBERT multivectors."),(0,a.kt)("li",{parentName:"ul"},"Sparse Vector Search - Use sparse vectors to get specific search results."),(0,a.kt)("li",{parentName:"ul"},"Hybrid Search - Combine dense and sparse vectors for more accurate search results.")),(0,a.kt)("p",null,"Manage Data"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Multitenancy - Manage multiple users within a single collection.  ")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"filtering---advanced"},"Filtering - Advanced"),(0,a.kt)("p",null,"Try advanced filtering based on nested payload conditions.  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'PUT collections/dinosaurs\n{\n  "vectors": {\n    "size": 4,\n    "distance": "Dot"\n  }\n}\n--- \nPUT collections/dinosaurs/points\n{\n  "points": [\n    {\n      "id": 1,\n      "vector": [0.1, 0.2, 0.3, 0.4],\n      "payload": {\n        "dinosaur": "t-rex",\n        "diet": [\n          { "food": "leaves", "likes": false },\n          { "food": "meat", "likes": true }\n        ]\n      }\n    },\n    {\n      "id": 2,\n      "vector": [0.2, 0.3, 0.4, 0.5],\n      "payload": {\n        "dinosaur": "diplodocus",\n        "diet": [\n          { "food": "leaves", "likes": true },\n          { "food": "meat", "likes": false }\n        ]\n      }\n    }\n  ]\n}\n\n--- \n// \ud544\ud130\uc758 \ud0a4\uac12\uc5d0\ub294 \ubc30\uc5f4\uc548\uc758 \uac1d\uccb4\ud0a4\uac12 \uac00\ub2a5 - diet[].food  \nPOST /collections/dinosaurs/points/scroll\n{\n  "filter": {\n    "must": [\n      {\n        "key": "diet[].food",\n        "match": {\n          "value": "meat"\n        }\n      },\n      {\n        "key": "diet[].likes",\n        "match": {\n          "value": true\n        }\n      }\n    ]\n  }\n}\n---\n// \uc544\ub2c8\uba74 nested object\uac00\ub2a5  \n// - \ucc38\uace0) has_id \ub294 nested \ud544\ub4dc \uc548\uc5d0 \ubd88\uac00\ub2a5   \nPOST /collections/dinosaurs/points/scroll\n{\n  "filter": {\n    "must": [\n      {\n        "nested": {\n          "key": "diet",\n          "filter": {\n            "must": [\n              {\n                "key": "food",\n                "match": {\n                  "value": "meat"\n                }\n              },\n              {\n                "key": "likes",\n                "match": {\n                  "value": true\n                }\n              }\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n\n')),(0,a.kt)("h2",{id:"filtering---full-text"},"Filtering - Full Text"),(0,a.kt)("p",null,"Search for substrings, tokens, or phrases within text fields.  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'PUT /collections/star_charts\n{\n  "vectors": {\n    "size": 4,\n    "distance": "Dot"\n  }\n}\n--- \nPUT collections/star_charts/points\n{\n  "points": [\n    {\n      "id": 1,\n      "vector": [0.05, 0.61, 0.76, 0.74],\n      "payload": {\n        "colony": "Mars",\n        "supports_life": true,\n        "description": "The red planet, Mars, has a cold desert climate and may have once had conditions suitable for life."\n      }\n    },\n    {\n      "id": 2,\n      "vector": [0.19, 0.81, 0.75, 0.11],\n      "payload": {\n        "colony": "Jupiter",\n        "supports_life": false,\n        "description": "Jupiter is the largest planet in the solar system, known for its Great Red Spot and hostile gas environment."\n      }\n    },\n    {\n      "id": 3,\n      "vector": [0.36, 0.55, 0.47, 0.94],\n      "payload": {\n        "colony": "Venus",\n        "supports_life": false,\n        "description": "Venus, Earth\u2019s twin in size, has an extremely thick atmosphere and surface temperatures hot enough to melt lead."\n      }\n    },\n    {\n      "id": 4,\n      "vector": [0.18, 0.01, 0.85, 0.80],\n      "payload": {\n        "colony": "Moon",\n        "supports_life": true,\n        "description": "Earth\u2019s Moon, long visited by astronauts, is a barren, airless world but could host colonies in its underground caves."\n      }\n    },\n    {\n      "id": 5,\n      "vector": [0.24, 0.18, 0.22, 0.44],\n      "payload": {\n        "colony": "Pluto",\n        "supports_life": false,\n        "description": "Once considered the ninth planet, Pluto is a small icy world at the edge of the solar system."\n      }\n    }\n  ]\n}\n---\n// full text searching \uc9c0\uc6d0 \nPOST /collections/star_charts/points/scroll\n{\n  "filter": {\n    "must": [\n      {\n        "key": "description",\n        "match": {\n          "text": "host colonies"\n        }\n      }\n    ]\n  },\n  "limit": 2,\n  "with_payload": true\n}\n---\n// description \ud14d\uc2a4\ud2b8 \ubd80\ubd84\uc744 \ud1a0\ud070\ud654 \ud558\uc5ec \uc778\ub371\uc2f1 \uac00\ub2a5  \n// - 5 and 20 characters will be indexed.  \n// - \nPUT /collections/star_charts/index\n{\n    "field_name": "description",\n    "field_schema": {\n        "type": "text",\n        "tokenizer": "word",\n        "lowercase": true\n    }\n}\n---\nPOST /collections/star_charts/points/scroll\n{\n  "filter": {\n    "must": [\n      {\n        "key": "description",\n        "match": {\n          "text": "cave colonies"\n        }\n      }\n    ]\n  },\n  "limit": 2,\n  "with_payload": true\n}\n\n\n')),(0,a.kt)("h2",{id:"multivector-search"},"Multivector Search"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Work with data represented by ColBERT multivectors.  ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'// \ub2e4\uc911 \ubc31\ud130 \ubaa8\ub4dc\ub85c \ucf5c\ub809\uc158\uc744 \ub123\uc744 \uc218 \uc788\ub2e4.  \nPUT collections/multivector_collection\n{\n  "vectors": {\n    "size": 4,\n    "distance": "Dot",\n    "multivector_config": {\n      "comparator": "max_sim"\n    }\n  }\n}\n---\n// \ubc31\ud130\uc758 \ud06c\uae30\ub294 4\ub85c \ub3d9\uc77c\ud558\ub2e4.  \nPUT collections/multivector_collection/points\n{\n  "points": [\n    {\n      "id": 1,\n      "vector": [\n        [-0.013,  0.020, -0.007, -0.111],\n        [-0.030, -0.015,  0.021,  0.072],\n        [0.041,  -0.004, 0.032,  0.062]\n      ],\n      "payload": {\n        "name": "Mars",\n        "type": "terrestrial"\n      }\n    },\n    {\n      "id": 2,\n      "vector": [\n        [0.011,  -0.050,  0.007,  0.101],\n        [0.031,  0.014,  -0.032,  0.012]\n      ],\n      "payload": {\n        "name": "Jupiter",\n        "type": "gas giant"\n      }\n    },\n    {\n      "id": 3,\n      "vector": [\n        [0.041,  0.034,  -0.012, -0.022],\n        [0.040,  -0.095,  0.021,  0.032],\n        [-0.030,  0.025,  0.011,  0.082],\n        [0.021,  -0.044,  0.032, -0.032]\n      ],\n      "payload": {\n        "name": "Venus",\n        "type": "terrestrial"\n      }\n    },\n    {\n      "id": 4,\n      "vector": [\n        [-0.015,  0.020,  0.045,  -0.131],\n        [0.041,   -0.024, -0.032,  0.072]\n      ],\n      "payload": {\n        "name": "Neptune",\n        "type": "ice giant"\n      }\n    }\n  ]\n}\n---\n// max_sim \uc2a4\ucf54\uc5b4 \uac12\uc774 \ub192\uc740\uac83\uc744 \uac00\uc838\uc628\ub2e4. \n// - \ub2e4\uc911 \ubc31\ud130\uc911 \ub192\uc740\uac12\uc744 \uae30\uc900\uc73c\ub85c \uacc4\uc0b0\ud55c\ub2e4.  \nPOST collections/multivector_collection/points/query\n{\n  "query": [\n    [-0.015,  0.020,  0.045,  -0.131],\n    [0.030,   -0.005, 0.001,   0.022],\n    [0.041,   -0.024, -0.032,  0.072]\n  ],\n  "with_payload": true\n}\n')),(0,a.kt)("h2",{id:"sparse-vector-search"},"Sparse Vector Search"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use sparse vectors to get specific search results.   ")),(0,a.kt)("p",null,"Sparse Vector Search \ub780?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sparse Vector Search\ub294 \ub300\ubd80\ubd84\uc758 \uac12\uc774 0\uc778 \ub4dc\ubb38(Sparse) \ud615\ud0dc\uc758 \ubca1\ud130\ub97c \uc774\uc6a9\ud574 \uac80\uc0c9\ud558\ub294 \ubc29\ubc95  "),(0,a.kt)("li",{parentName:"ul"},"\uc77c\ubc18\uc801\uc778 Dense Vector Search\ub294 \ubaa8\ub4e0 \ucc28\uc6d0\uc5d0 \uac12\uc774 \u201c\uaf49 \ucc28\uc788\ub294\u201d \ubd80\ub3d9\uc18c\uc218(double/float) \ubca1\ud130\ub97c \uc0ac\uc6a9  "),(0,a.kt)("li",{parentName:"ul"},"\ubc18\uba74, Sparse Vector\ub294 \ub300\ubd80\ubd84\uc758 \uac12\uc774 0\uc774\uace0, \uc18c\uc218\uc758 \uac12\ub9cc \uc911\uc694\ud55c \ud615\ud0dc.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},'\uc608\ub97c \ub4e4\uba74: {"word1": 0.8, "word5": 0.6, "word300": 0.9} \uac19\uc774 \ud2b9\uc815 \uc704\uce58\ub9cc \uac12\uc774 \uc788\uc5b4\uc694.'))),(0,a.kt)("li",{parentName:"ul"},"\uc7a5\uc810 : TF-IDF \uac19\uc740 \uc804\ud1b5\uc801 \uac80\uc0c9 \ubc29\ubc95\uacfc \ube44\uc2b7\ud55c \ud6a8\uacfc",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre"},"\u2022   Dense Vector Search\ub294 \uc758\ubbf8(semantic)\ub97c \uc7a1\uc544\uc8fc\uace0, Sparse Vector Search\ub294 \uc815\ud655\ud55c \ud0a4\uc6cc\ub4dc  \n")))),(0,a.kt)("li",{parentName:"ul"},"2\uac00\uc9c0 \ubc29\uc2dd\uc744 \ud63c\uc6a9\ud55c Hybrid Search (Dense + Sparse) \ub3c4 \ub9ce\uc774 \uc0ac\uc6a9\ud55c\ub2e4.")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},' "keywords": {\n    "indices": [10, 42], // 10\ucc28\uc6d0, 42 \ucc28\uc6d0\uc5d0\ub9cc \uac12\uc774 \uc788\ub2e4. \ub098\uba38\uc9c0\ub294 0\uc774\ub2e4.  \n    "values": [0.3, 0.5]\n}\n// \uba54\ubaa8\ub9ac\ub97c \uc544\ub07c\uace0, \uacc4\uc0b0 \uc18d\ub3c4\ub97c \ube60\ub974\uac8c\n// \uc704 \ub370\uc774\ud130 \ud3ec\uc778\ud2b8\uc758 \uacbd\uc6b0 "indices": [10, 50] \uc744 \uac80\uc0c9\ud558\uba74 -> 10\ucc28\uc6d0\ub9cc \ubcf4\uba74 \ub41c\ub2e4.  \n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'// sparse vectors \ub85c \uceec\ub809\uc158 \uc815\uc758  \nPUT /collections/sparse_charts\n{\n    "sparse_vectors": {\n        "keywords": {}\n    }\n}\n--- \n// indices : \ubca1\ud130 \uacf5\uac04\uc5d0\uc11c 0\uc774 \uc544\ub2cc \uac12\uc758 \uc704\uce58\uc785\ub2c8\ub2e4.   \n// values : \ud574\ub2f9 \uc704\uce58\uc5d0 \ud574\ub2f9\ud558\ub294 \uac12\uc73c\ub85c, \uac01 \ud0a4\uc6cc\ub4dc \ub610\ub294 \uae30\ub2a5\uc758 \uc911\uc694\ub3c4\ub098 \uac00\uc911\uce58\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.  \nPUT /collections/sparse_charts/points\n{\n    "points": [\n        {\n            "id": 1,\n            "vector": {\n                "keywords": {\n                    "indices": [1, 42],\n                    "values": [0.22, 0.8]\n                }\n            }\n        },\n        {\n            "id": 2,\n            "vector": {\n                "keywords": {\n                    "indices": [2, 35],\n                    "values": [0.15, 0.65]\n                }\n            }\n        },\n        {\n            "id": 3,\n            "vector": {\n                "keywords": {\n                    "indices": [10, 42],\n                    "values": [0.3, 0.5]\n                }\n            }\n        },\n        {\n            "id": 4,\n            "vector": {\n                "keywords": {\n                    "indices": [0, 3],\n                    "values": [0.4, 0.3]\n                }\n            }\n        },\n        {\n            "id": 5,\n            "vector": {\n                "keywords": {\n                    "indices": [2, 4],\n                    "values": [0.9, 0.8]\n                }\n            }\n        }\n    ]\n}\n---\n// \ubc31\ud130 \uac80\uc0c9, \uc6d0\ud558\ub294 \ucc28\uc6d0\ub9cc indices \ud544\ub4dc\uc5d0 \ub123\uc5b4\uc11c \uac80\uc0c9\ud560 \uc218 \uc788\ub2e4.  \nPOST /collections/sparse_charts/points/query\n{\n    "query": {\n        "indices": [1, 42],\n        "values": [0.22, 0.8]\n    },\n    "using": "keywords"\n}\n---\n// \nPOST /collections/sparse_charts/points/query\n{\n    "query": {\n        "indices": [0, 2, 4],\n        "values": [0.4, 0.9, 0.8]\n    },\n    "using": "keywords"\n}\n\n\n')),(0,a.kt)("h2",{id:"hybrid-search"},"Hybrid Search"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Combine dense and sparse vectors for more accurate search results.  ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"2\uac00\uc9c0 \ubc29\uc2dd\uc744 \ud63c\uc6a9\ud55c Hybrid Search (Dense + Sparse) \uc608\uc81c\uc774\ub2e4.  "))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'// Dense \ubc31\ud130 \uc815\uc758 \ud06c\uae30 4, \ucf54\uc0ac\uc778 \uc720\uc0ac\ub3c4 \uc0ac\uc6a9  \n// Sparse \ubc31\ud130 \uc815\uc758  for keyword-based indexing.    \nPUT /collections/terraforming_plans\n{\n    "vectors": {\n        "size": 4,  \n        "distance": "Cosine"  \n    },\n    "sparse_vectors": {\n        "keywords": { }\n    }\n}\n---\nPUT /collections/terraforming_plans/points\n{\n    "points": [\n        {\n            "id": 1,  \n            "vector": {\n                "": [0.02, 0.4, 0.5, 0.9],   // Dense vector\n                "keywords": {\n                   "indices": [1, 42],    // Sparse for "rocky" and "Mars"\n                   "values": [0.22, 0.8]  // Weights for these keywords\n                }\n            },\n            "payload": {\n                "description": "Plans about Mars colonization."\n            }\n        },\n        {\n            "id": 2,  \n            "vector": {\n                "": [0.3, 0.1, 0.6, 0.4],   \n                "keywords": {\n                   "indices": [2, 35],    // Sparse for "gas giant" and "icy"\n                   "values": [0.15, 0.65]  // Weights for these keywords\n                }\n            },\n            "payload": {\n                "description": "Study on Jupiter gas composition."\n            }\n        },\n        {\n            "id": 3,  \n            "vector": {\n                "": [0.7, 0.5, 0.3, 0.8],   \n                "keywords": {\n                   "indices": [10, 42],    // Sparse for "Venus" and "rocky"\n                   "values": [0.3, 0.5]    // Weights for these keywords\n                }\n            },\n            "payload": {\n                "description": "Venus geological terrain analysis."\n            }\n        }\n    ]\n}\n\n---\n// keyword-based (sparse) and semantic (dense) search \n// Reciprocal Rank Fusion (RRF) \ubc29\uc2dd\uc73c\ub85c \uc810\uc218\ub97c \ucde8\ud569\ud55c\ub2e4.  \n// - \ub2e8\uc21c\ud788 \ub450 \ubc31\ud130 \uc810\uc218\ub97c \ud569\uc0b0\ud558\ub294\uac83\uc774 \uc544\ub2c8\ub2e4.  \n//    - Keyword-based query: sparse vector semantic similarity search \n//    - Dense vector query: Uses the dense vector for semantic similarity search.\n//    -> \ub458 \uc911 \ud558\ub098\ub77c\ub3c4 \uc0c1\uc704\uad8c\uc774\uba74 \uc810\uc218 \ub192\uac8c (RFF)  \n// - \ubb3c\ub860 \uc544\ub808 \ucee8\uc149\ucc98\ub7fc \ub2e4\uc591\ud55c \ubcc0\ud615\uc774 \uac00\ub2a5\ud558\ub2e4.  \n\n\nPOST /collections/terraforming_plans/points/query\n{\n    "prefetch": [\n        {\n            "query": { \n                "indices": [1, 42],   \n                "values": [0.22, 0.8]  \n            },\n            "using": "keywords",\n            "limit": 20\n        },\n        {\n            "query": [0.01, 0.45, 0.67, 0.89],\n            "using": "",\n            "limit": 20\n        }\n    ],\n    "query": { "fusion": "rrf" },  // Reciprocal rank fusion\n    "limit": 10,\n    "with_payload": true\n}\n\n// \ucee8\uc149  \n// Multi-stage queries : 2\ub2e8\uacc4\ub85c \ub098\ub204\uc5b4\uc11c \ucffc\ub9ac\ud55c\ub2e4. \ube60\ub974\uac8c \ud6c4\ubcf4\uc790\ub97c \ucc3e\uace0, \uadf8 \ub2e4\uc74c \uc2a4\ucf54\uc5b4\ub9c1\uc744 \uc9c4\ud589  \n// Score boosting : \ud2b9\uc815 \ubb38\uc790\uac00 \uc788\ub294\uacbd\uc6b0 \ub354 \ub192\uc740 \uc810\uc218\ub97c \uc900\ub2e4.  \n\n---\nPOST /collections/terraforming_plans/points/query\n{\n    "prefetch":  {\n            "query": { \n                "indices": [1, 42],   \n                "values": [0.22, 0.8]  \n            },\n            "using": "keywords",\n            "limit": 20\n        },\n    "query": [0.01, 0.45, 0.67, 0.89]\n    "limit": 10,\n    "with_payload": true\n}\n')))}p.isMDXComponent=!0}}]);