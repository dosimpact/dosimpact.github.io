"use strict";(self.webpackChunkdosimpact_blog=self.webpackChunkdosimpact_blog||[]).push([[21681],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>y});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,p=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,y=d["".concat(p,".").concat(m)]||d[m]||u[m]||c;return t?r.createElement(y,i(i({ref:n},l),{},{components:t})):r.createElement(y,i({ref:n},l))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,i=new Array(c);i[0]=m;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a[d]="string"==typeof e?e:o,i[1]=a;for(var s=2;s<c;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},18603:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>a,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const c={sidebar_position:1},i="Code Snippets",a={unversionedId:"g-hard/cryptocurrency/code-snippets/c-code01",id:"g-hard/cryptocurrency/code-snippets/c-code01",title:"Code Snippets",description:"Nnemonic > privateKey",source:"@site/docs/g-hard/3-cryptocurrency/1-code-snippets/c-code01.md",sourceDirName:"g-hard/3-cryptocurrency/1-code-snippets",slug:"/g-hard/cryptocurrency/code-snippets/c-code01",permalink:"/docs/g-hard/cryptocurrency/code-snippets/c-code01",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/g-hard/3-cryptocurrency/1-code-snippets/c-code01.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"hardSkill",previous:{title:"CodeSnippets",permalink:"/docs/category/codesnippets"},next:{title:"DApp \uac1c\ubc1c \uc644\ubcbd \ub9c8\uc2a4\ud130 : Solidity",permalink:"/docs/category/dapp-\uac1c\ubc1c-\uc644\ubcbd-\ub9c8\uc2a4\ud130--solidity"}},p={},s=[{value:"Nnemonic &gt; privateKey",id:"nnemonic--privatekey",level:2}],l={toc:s},d="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"code-snippets"},"Code Snippets"),(0,o.kt)("h2",{id:"nnemonic--privatekey"},"Nnemonic > privateKey"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'/*\n  npm init -y\n  npm i @babel/node @babel/cli @babel/core @babel/preset-env -D\n  npm i @scure/bip39 ethers@^5.4.0\n  npx babel --presets @babel/env getPrivateKeyfromMnemonic.js | node\n*/\nimport * as bip39 from "@scure/bip39";\nimport { wordlist as enWordList } from "@scure/bip39/wordlists/english";\nimport { wordlist as koWordList } from "@scure/bip39/wordlists/korean";\nimport { ethers } from "ethers";\n\nconst bootstrap = async () => {\n  const mnemonic =\n    "\u1106\u116e\u11af\u110e\u1166 \u110b\u1175\u11af\u1103\u1173\u11bc \u110b\u1175\u1112\u1169\u11ab \u1112\u1162\u1103\u1161\u11b8 \u110b\u1167\u11ab\u1100\u1173\u11a8 \u1109\u1165\u11bc\u1106\u1167\u11bc \u1100\u1169\u11bc\u1103\u1169\u11bc \u1112\u1161\u11b8\u1105\u1175\u110c\u1165\u11a8 \u110b\u1167\u11bc\u110b\u1167\u11a8 \u110b\u1167\u11ab\u1109\u1166 \u1101\u1161\u11b7\u1108\u1161\u11a8 \u110b\u116c\u11ab\u110d\u1169\u11a8";\n\n  const enNnemonic = mnemonic\n    .split(" ")\n    .map((word) => {\n      const idx = koWordList.findIndex((w) => word === w);\n\n      return enWordList[idx];\n    })\n    .join(" ");\n\n  const seed = await bip39.mnemonicToSeed(enNnemonic);\n  const wallet = ethers.Wallet.fromMnemonic(enNnemonic, "m/44\'/60\'/0\'/0/0");\n\n  console.log("--\x3ewallet.privateKey : ", wallet.privateKey);\n};\nbootstrap();\n\n')))}u.isMDXComponent=!0}}]);