"use strict";(self.webpackChunkdosimpact_blog=self.webpackChunkdosimpact_blog||[]).push([[7073],{3905:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},f=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,f=d(e,["components","mdxType","originalType","parentName"]),p=c(n),u=o,m=p["".concat(i,".").concat(u)]||p[u]||l[u]||a;return n?r.createElement(m,s(s({ref:t},f),{},{components:n})):r.createElement(m,s({ref:t},f))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[p]="string"==typeof e?e:o,s[1]=d;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85827:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={sidebar_position:2},s="Pandas - CSV + df \uc608\uc81c",d={unversionedId:"g-da/py/py02",id:"g-da/py/py02",title:"Pandas - CSV + df \uc608\uc81c",description:"",source:"@site/docs/g-da/1-py/py02.md",sourceDirName:"g-da/1-py",slug:"/g-da/py/py02",permalink:"/docs/g-da/py/py02",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/g-da/1-py/py02.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"dataAnalytics",previous:{title:"Python virtualenv \uc124\uc815\ubc95",permalink:"/docs/g-da/py/py01"},next:{title:"Pandas - File IO",permalink:"/docs/g-da/py/py03"}},i={},c=[],f={toc:c},p="wrapper";function l(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pandas---csv--df-\uc608\uc81c"},"Pandas - CSV + df \uc608\uc81c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'# %% [markdown]\n# CSV + Dataframe \uc608\uc81c  \n# - \uc8fc\ud53c\ud130 \ub178\ud2b8\ubd81\uc5d0\uc11c\ub3c4 \ud30c\uc774\uc36c \ud328\ud0a4\uc9c0 \ucc38\uc870\uac00 \uac00\ub2a5\ud558\ub2e4.(\ub2e8, \ub85c\uceec \uac00\uc0c1\ud658\uacbd)  \n\n# %%\nimport os\nimport pandas as pd\nfrom file_io import save_df_to_csv, save_df_to_tsv, load_df_from_csv, load_df_from_tsv, add_columns_if_not_exists, clean_columns\nimport re\nimport time\n\nprint(os.getcwd())\nFILE_PATH = "./output.csv"\n\n\n# %%\n# eg) save file to tsv\ndata = {\n    \'\uc774\ub984\': [\'\uae40\ucca0\uc218\', \'\uc774\uc601\ud76c\', \'\ubc15\ubbfc\uc218\'],\n    \'\ub098\uc774\': [25, 28, 30],\n    \'\uc131\ubcc4\': [\'\ub0a8\', \'\uc5ec\', \'\ub0a8\']\n}\ndf = pd.DataFrame(data)\nsave_df_to_tsv(df, "./output.tsv")\ndf\n\n# %%\n# eg) load file from tsv\ndf = load_df_from_tsv("./output.tsv")\ndf\n\n# %%\n# eg) add columns if not exists\ndf = load_df_from_tsv("./output.tsv")\nadd_columns_if_not_exists(df, ["userId","profile","summary"])\nsave_df_to_tsv(df, "./output.tsv")\ndf\n\n# %%\n# eg) add user id value\ndf = load_df_from_tsv("./output.tsv")\nfor i in range(len(df)):\n    df.loc[i, "userId"] = df.iloc[i]["\uc774\ub984"] + str(df.loc[i]["\ub098\uc774"]) + df.loc[i]["\uc131\ubcc4"] + str(i)\n    df.loc[i, "profile"] = df.iloc[i]["\uc774\ub984"] +"("+ str(df.loc[i]["\ub098\uc774"])+")"\n    df.loc[i, "summary"] = df.iloc[i]["\uc774\ub984"] + "(" + str(df.loc[i]["\ub098\uc774"]) + ")" + "(" + df.loc[i]["\uc131\ubcc4"] + ")"\n    save_df_to_tsv(df, "./output.tsv")\n    time.sleep(1)\n\n# %%\n# eg) clean only summary column\ndf = load_df_from_tsv("./output.tsv")\ndf = clean_columns(df, ["summary"])\nsave_df_to_tsv(df, "./output.tsv")\ndf\n')))}l.isMDXComponent=!0}}]);