"use strict";(self.webpackChunkdosimpact_blog=self.webpackChunkdosimpact_blog||[]).push([[85362],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(t),g=r,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||l;return t?a.createElement(m,i(i({ref:n},c),{},{components:t})):a.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=g;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},61289:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=t(87462),r=(t(67294),t(3905));const l={sidebar_position:7},i="Supabase Functions, Triggers",o={unversionedId:"g-fe/next+supa/next7-funcs",id:"g-fe/next+supa/next7-funcs",title:"Supabase Functions, Triggers",description:"- Supabase Functions, Triggers",source:"@site/docs/g-fe/6-next+supa/next7-funcs.md",sourceDirName:"g-fe/6-next+supa",slug:"/g-fe/next+supa/next7-funcs",permalink:"/docs/g-fe/next+supa/next7-funcs",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/g-fe/6-next+supa/next7-funcs.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"frontEnd",previous:{title:"Supabase Auth DeepDive",permalink:"/docs/g-fe/next+supa/next6-Auth2"},next:{title:"Supabase Edge Functions",permalink:"/docs/g-fe/next+supa/next8-edge"}},s={},u=[{value:"\ud83d\udccc Function",id:"-function",level:2},{value:"eg) hello world \ucd9c\ub825",id:"eg-hello-world-\ucd9c\ub825",level:3},{value:"eg) loop\ub4f1 sql\ubb38\ubc95 \uc0ac\uc6a9 \uac00\ub2a5",id:"eg-loop\ub4f1-sql\ubb38\ubc95-\uc0ac\uc6a9-\uac00\ub2a5",level:3},{value:"eg) RLS with function (auth.uid())",id:"eg-rls-with-function-authuid",level:3},{value:"eg) function(select * )",id:"eg-functionselect--",level:3},{value:"More",id:"more",level:2},{value:"Database Functions vs Edge Functions",id:"database-functions-vs-edge-functions",level:3},{value:"\ud83d\udccc Profile management",id:"-profile-management",level:2},{value:"\ud83d\udccc function with pgVector",id:"-function-with-pgvector",level:2}],c={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"supabase-functions-triggers"},"Supabase Functions, Triggers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#supabase-functions-triggers"},"Supabase Functions, Triggers"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#-function"},"\ud83d\udccc Function"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#eg-hello-world-%EC%B6%9C%EB%A0%A5"},"eg) hello world \ucd9c\ub825")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#eg-loop%EB%93%B1-sql%EB%AC%B8%EB%B2%95-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5"},"eg) loop\ub4f1 sql\ubb38\ubc95 \uc0ac\uc6a9 \uac00\ub2a5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#eg-rls-with-function-authuid"},"eg) RLS with function (auth.uid())")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#eg-functionselect--"},"eg) function(select ","*"," )")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#more"},"More"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#database-functions-vs-edge-functions"},"Database Functions vs Edge Functions")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#-profile-management"},"\ud83d\udccc Profile management")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#-function-with-pgvector"},"\ud83d\udccc function with pgVector"))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/docs/guides/database/functions"},"https://supabase.com/docs/guides/database/functions")),(0,r.kt)("h2",{id:"-function"},"\ud83d\udccc Function"),(0,r.kt)("h3",{id:"eg-hello-world-\ucd9c\ub825"},"eg) hello world \ucd9c\ub825"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- define function  \ncreate or replace function hello_world() -- 1 upsert\nreturns text -- 2 return types (void, int, ... )\nlanguage sql -- 3 plpgsql, plv8, plpython\nas $$  -- 4 function wrapper open  \n  select 'hello world';  -- 5 sql \n$$; --6 wrapper close\n\n-- function call\nselect hello_world();\n\n-- js \nconst { data, error } = await supabase.rpc('hello_world')\n")),(0,r.kt)("h3",{id:"eg-loop\ub4f1-sql\ubb38\ubc95-\uc0ac\uc6a9-\uac00\ub2a5"},"eg) loop\ub4f1 sql\ubb38\ubc95 \uc0ac\uc6a9 \uac00\ub2a5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- upsert function \ncreate or replace function output_hello_world()\nreturns setof text \nas $$\ndeclare\n    i integer;\nbegin\n    for i in 1..2 loop\n        return next format('%s - hello world', i);\n    end loop;\nend;\n$$ language plpgsql;\n\n-- function \ud638\ucd9c\nSELECT output_hello_world();\n-- returns\n-- 1 - hello world\n-- 2 - hello world\n")),(0,r.kt)("h3",{id:"eg-rls-with-function-authuid"},"eg) RLS with function (auth.uid())"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"auth.uid()\ub294 \ud604\uc7ac \uc138\uc158 \ud14c\uc774\ube14 \uc815\ubcf4\ub97c \ubc14\ud0d5\uc73c\ub85c \ub85c\uadf8\uc778\ud55c \uc0ac\uc6a9\uc790\uc758 uid\ub97c \ub9ac\ud134   "),(0,r.kt)("li",{parentName:"ul"},"RLS\uc5d0 function \ud638\ucd9c\uac00\ub2a5.  ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'CREATE POLICY "Enable select for users based on user_id" ON "public"."todos"\nAS PERMISSIVE FOR SELECT\nTO public\nUSING (auth.uid() = user_id)  \n')),(0,r.kt)("h3",{id:"eg-functionselect--"},"eg) function(select * )"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"--- DDL\ncreate table planets (\n  id serial primary key,\n  name text\n);\ninsert into planets (id, name)\nvalues (1, 'Tattoine'),  (2, 'Alderaan'),  (3, 'Kashyyyk');\n\ncreate table people (\n  id serial primary key,\n  name text,\n  planet_id bigint references planets\n);\n\ninsert into people (id, name, planet_id)\nvalues\n  (1, 'Anakin Skywalker', 1),\n  (2, 'Luke Skywalker', 1),\n  (3, 'Princess Leia', 2),\n  (4, 'Chewbacca', 3);\n\n--- function\ncreate or replace function get_planets()\nreturns setof planets\nlanguage sql\nas $$\n  select * from planets;\n$$;\n")),(0,r.kt)("h2",{id:"more"},"More"),(0,r.kt)("h3",{id:"database-functions-vs-edge-functions"},"Database Functions vs Edge Functions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Database Functions: \ub370\uc774\ud130 \uc9d1\uc57d\uc801\uc778 \uc791\uc5c5\uc5d0 \uc801\ud569\ud558\uba70, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub0b4\ubd80\uc5d0\uc11c \uc2e4\ud589\ub429\ub2c8\ub2e4. REST \ubc0f GraphQL API\ub85c \ud638\ucd9c \uac00\ub2a5."),(0,r.kt)("li",{parentName:"ul"},"Edge Functions: \uc9c0\uc815\ud559\uc801 low-latency \uc694\uad6c \uc791\uc5c5\uc5d0 \uc801\ud569, Typescript\ub85c \uc791\uc131\ub41c \uae00\ub85c\ubc8c \ubd84\uc0b0 \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ub429\ub2c8\ub2e4.")),(0,r.kt)("h2",{id:"-profile-management"},"\ud83d\udccc Profile management"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"supabase\uc5d0\uc11c auth.users \ud14c\uc774\ube14\uc740 \uc9c1\uc811 \uc811\uadfc\uc774 \ubd88\uac00\ub2a5\ud558\ub2e4.  ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\uc815\uad50\ud558\uac8c \ub3cc\uc544\uac00\ub294 \uc0ac\uc6a9\uc790 \uc778\uc99d \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc740 \ubcf4\ud638\ub418\uace0 \uc788\ub2e4.  "))),(0,r.kt)("li",{parentName:"ul"},"\uc0ac\uc6a9\uc790\uac00 \uac00\uc785\uc774 \ub418\ub294 \uc21c\uac04 profiles\uc774\ub77c\ub294 \ud14c\uc774\ube14\ub85c \ub370\uc774\ud130\ub4e4\uc744 \ubcf5\uc0ac\ud574\uc57c \ud55c\ub2e4.  ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\uc774\ub54c trigger, function\uc774 \uc0ac\uc6a9\ub41c\ub2e4.  "),(0,r.kt)("li",{parentName:"ul"},"\uc544\ub798 \uc608\uc2dc\uc5d0\uc11c",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"on_auth_user_created : after insert on auth.users \uc870\uac74\uc77c\ub54c \ud2b8\ub9ac\uac70  "),(0,r.kt)("li",{parentName:"ul"},"\ubb50\ub97c ?: handle_new_user \ub97c, \ud574\ub2f9 \ud568\uc218\uc5d0\uc11c\ub294 raw_user_meta_data\uc758 json\ub370\uc774\ud130\uc640 profile\uc758 \uceec\ub7fc\uc744 \ub9e4\ud551\ud558\uace0 \uc788\ub2e4.   ")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Create a table for public profiles\ncreate table profiles (\n  id uuid references auth.users on delete cascade not null primary key,\n  updated_at timestamp with time zone,\n  username text unique,\n  full_name text,\n  avatar_url text,\n  website text,\n  email text,\n\n  constraint username_length check (char_length(username) >= 3)\n);\n-- Set up Row Level Security (RLS)\n-- See https://supabase.com/docs/guides/auth/row-level-security for more details.\nalter table profiles\n  enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles\n  for select using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles\n  for insert with check ((select auth.uid()) = id);\n\ncreate policy \"Users can update own profile.\" on profiles\n  for update using ((select auth.uid()) = id);\n\n-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.\n-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.\ncreate function public.handle_new_user()\nreturns trigger\nset search_path = ''\nas $$\nbegin\n  insert into public.profiles (id, full_name, avatar_url, website, email)\n  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url', NULL, new.raw_user_meta_data->>'email');\n  return new;\nend;\n$$ language plpgsql security definer;\n\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\n  values ('avatars', 'avatars');\n\n-- Set up access controls for storage.\n-- See https://supabase.com/docs/guides/storage#policy-examples for more details.\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects\n  for select using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects\n  for insert with check (bucket_id = 'avatars');\n\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"raw_user_meta_data\uc5d0\uc11c email \uceec\ub7fc \ucd94\uac00\ud574\uc57c \ud55c\ub2e4.",(0,r.kt)("br",{parentName:"em"})),"function, trigger \uc0ad\uc81c\uac00 \ud544\uc694\ud558\ub2e4\uba74 trigger \uba3c\uc800 \uc9c0\uc6cc\uc57c \ud55c\ub2e4.  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;"),"    ")),(0,r.kt)("h2",{id:"-function-with-pgvector"},"\ud83d\udccc function with pgVector"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ubb38\uc11c \uc720\uc0ac\ub3c4 \uac80\uc0c9  ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Create embedding similarity search functions\n-- #variable_conflict use_variable : \ud14c\uc774\ube14 \uc5f4\uc758 \uc774\ub984\uc774 \ub3d9\uc77c\ud560 \ub54c \ucda9\ub3cc \uc2dc \ubcc0\uc218\ub97c \uc6b0\uc120 \ucc38\uc870.\ncreate or replace function match_page_sections(embedding vector(1536), match_threshold float, match_count int, min_content_length int)\nreturns table (id bigint, page_id bigint, slug text, heading text, content text, similarity float)\nlanguage plpgsql\nas $$\n#variable_conflict use_variable\nbegin\n  return query\n  select\n    nods_page_section.id,\n    nods_page_section.page_id,\n    nods_page_section.slug,\n    nods_page_section.heading,\n    nods_page_section.content,\n    (nods_page_section.embedding <#> embedding) * -1 as similarity\n  from nods_page_section\n\n  -- We only care about sections that have a useful amount of content\n  where length(nods_page_section.content) >= min_content_length\n\n  -- The dot product is negative because of a Postgres limitation, so we negate it\n  -- <#> - (negative) inner product \uc5f0\uc0b0\uc790\uc774\ub2e4.  \n  and (nods_page_section.embedding <#> embedding) * -1 > match_threshold\n\n  -- OpenAI embeddings are normalized to length 1, so\n  -- cosine similarity and dot product will produce the same results.\n  -- Using dot product which can be computed slightly faster.\n  --\n  -- For the different syntaxes, see https://github.com/pgvector/pgvector\n  order by nods_page_section.embedding <#> embedding\n  \n  limit match_count;\nend;\n$$;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"    const { error: matchError, data: pageSections } = await supabaseClient.rpc(\n      'match_page_sections',\n      {\n        embedding,\n        match_threshold: 0.78,\n        match_count: 10,\n        min_content_length: 50,\n      }\n    )\n")))}d.isMDXComponent=!0}}]);