"use strict";(self.webpackChunkdosimpact_blog=self.webpackChunkdosimpact_blog||[]).push([[44083],{3905:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>f});var o=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var l=o.createContext({}),p=function(n){var e=o.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},d=function(n){var e=p(n.components);return o.createElement(l.Provider,{value:e},n.children)},c="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},m=o.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,l=n.parentName,d=s(n,["components","mdxType","originalType","parentName"]),c=p(t),m=r,f=c["".concat(l,".").concat(m)]||c[m]||u[m]||a;return t?o.createElement(f,i(i({ref:e},d),{},{components:t})):o.createElement(f,i({ref:e},d))}));function f(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s[c]="string"==typeof n?n:r,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},87293:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=t(87462),r=(t(67294),t(3905));const a={sidebar_position:14},i="React Patterns - use Funnel",s={unversionedId:"g-fe/react/advanced/ad14-patterns-funnel",id:"g-fe/react/advanced/ad14-patterns-funnel",title:"React Patterns - use Funnel",description:"- React Patterns - use Funnel",source:"@site/docs/g-fe/4-react/4-advanced/ad14-patterns-funnel.md",sourceDirName:"g-fe/4-react/4-advanced",slug:"/g-fe/react/advanced/ad14-patterns-funnel",permalink:"/docs/g-fe/react/advanced/ad14-patterns-funnel",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/g-fe/4-react/4-advanced/ad14-patterns-funnel.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"frontEnd",previous:{title:"React Patterns - HoC",permalink:"/docs/g-fe/react/advanced/ad13-patterns-hoc"},next:{title:"React Patterns - Compoisiton",permalink:"/docs/g-fe/react/advanced/ad14-patterns-composition"}},l={},p=[{value:"@use-funnel",id:"use-funnel",level:2}],d={toc:p},c="wrapper";function u(n){let{components:e,...t}=n;return(0,r.kt)(c,(0,o.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"react-patterns---use-funnel"},"React Patterns - use Funnel"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#react-patterns---use-funnel"},"React Patterns - use Funnel"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#use-funnel"},"@use-funnel"))))),(0,r.kt)("h2",{id:"use-funnel"},"@use-funnel"),(0,r.kt)("p",null,"github : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/toss/use-funnel"},"https://github.com/toss/use-funnel"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud1a0\uc2a4\uc5d0\uc11c \ub9cc\ub4e0 \ub77c\uc774\ube0c\ub7ec\ub9ac  "),(0,r.kt)("li",{parentName:"ul"},"\ud37c\ub110 \uad00\ub9ac\uc5d0 \ud2b9\ud654\ub41c \ucd94\uc0c1\ud654\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac  ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"1.\ud37c\ub110 step \uad00\ub9ac  "),(0,r.kt)("li",{parentName:"ul"},"2.\uac01 \ud37c\ub110\ubcc4 \uc0c1\ud0dc\uad00\ub9ac \uacb0\ud569  "),(0,r.kt)("li",{parentName:"ul"},"3.history \uad00\ub9ac  ")))),(0,r.kt)("p",null,"\ucc38\uace0"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://toss.tech/article/use-funnel-2"},"https://toss.tech/article/use-funnel-2"),"  ")),(0,r.kt)("p",null,"\ud83d\udccc \uc608\uc81c \ucf54\ub4dc  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"/** @jsxImportSource react */\nimport { useFunnel } from '@use-funnel/react-router-dom';\nimport { useState } from 'react';\n\n// Mock API - \uc774\uba54\uc77c \uac80\uc99d\nconst validateEmailAPI = async (email: string): Promise<{ valid: boolean; message?: string }> => {\n  // \uc2e4\uc81c API \ud638\ucd9c\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud558\uae30 \uc704\ud55c \uc9c0\uc5f0\n  await new Promise(resolve => setTimeout(resolve, 800));\n\n  if (!email.endsWith('@gmail.com')) {\n    return {\n      valid: false,\n      message: 'Gmail \uacc4\uc815\ub9cc \uc0ac\uc6a9 \uac00\ub2a5\ud569\ub2c8\ub2e4. (@gmail.com)',\n    };\n  }\n\n  return { valid: true };\n};\n\n// Type definitions - clearly define the context required for each step\ntype FunnelContext = {\n  emailInput: { email?: string; password?: string };\n  passwordInput: { email: string; password?: string };\n  selectInfoType: { email: string; password: string; infoType?: 'STUDENT' | 'EMPLOYEE' };\n  confirmSelection: { email: string; password: string; infoType: 'STUDENT' | 'EMPLOYEE' };\n  studentInfo: { email: string; password: string; infoType: 'STUDENT'; school?: string };\n  employeeInfo: { email: string; password: string; infoType: 'EMPLOYEE'; company?: string };\n  complete:\n    | { email: string; password: string; infoType: 'STUDENT'; school: string }\n    | { email: string; password: string; infoType: 'EMPLOYEE'; company: string };\n};\n\ninterface EmailInputProps {\n  onNext: (email: string) => void;\n}\n\nconst EmailInput = ({ onNext }: EmailInputProps) => {\n  const [email, setEmail] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [isValidating, setIsValidating] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email.trim()) {\n      return;\n    }\n\n    setError(null);\n    setIsValidating(true);\n\n    try {\n      const result = await validateEmailAPI(email);\n\n      if (result.valid) {\n        onNext(email);\n      } else {\n        setError(result.message || '\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uc774\uba54\uc77c\uc785\ub2c8\ub2e4.');\n      }\n    } catch (err) {\n      setError('\uc774\uba54\uc77c \uac80\uc99d \uc911 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4.');\n    } finally {\n      setIsValidating(false);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '400px', margin: '0 auto' }}>\n      <h2>Enter your email</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"email\"\n          value={email}\n          onChange={e => {\n            setEmail(e.target.value);\n            setError(null); // \uc785\ub825 \uc2dc \uc5d0\ub7ec \ucd08\uae30\ud654\n          }}\n          placeholder=\"Enter your email\"\n          style={{\n            width: '100%',\n            padding: '10px',\n            marginBottom: '10px',\n            border: error ? '2px solid #dc3545' : '1px solid #ccc',\n            borderRadius: '4px',\n            outline: error ? 'none' : undefined,\n          }}\n          required\n          disabled={isValidating}\n        />\n        {error && (\n          <div\n            style={{\n              padding: '10px',\n              marginBottom: '10px',\n              backgroundColor: '#f8d7da',\n              border: '1px solid #f5c6cb',\n              borderRadius: '4px',\n              color: '#721c24',\n              fontSize: '14px',\n            }}\n          >\n            \u26a0\ufe0f {error}\n          </div>\n        )}\n        <button\n          type=\"submit\"\n          disabled={isValidating}\n          style={{\n            width: '100%',\n            padding: '10px',\n            backgroundColor: isValidating ? '#6c757d' : '#007bff',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: isValidating ? 'not-allowed' : 'pointer',\n            opacity: isValidating ? 0.7 : 1,\n          }}\n        >\n          {isValidating ? '\uac80\uc99d \uc911...' : 'Next'}\n        </button>\n      </form>\n      <div style={{ marginTop: '15px', padding: '10px', backgroundColor: '#e7f3ff', borderRadius: '4px' }}>\n        <p style={{ margin: 0, fontSize: '13px', color: '#004085' }}>\ud83d\udca1 \ud78c\ud2b8: @gmail.com \uc774\uba54\uc77c\ub9cc \ud5c8\uc6a9\ub429\ub2c8\ub2e4.</p>\n      </div>\n    </div>\n  );\n};\n\ninterface PasswordInputProps {\n  email: string;\n  onNext: (password: string) => void;\n}\n\nconst PasswordInput = ({ email, onNext }: PasswordInputProps) => {\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (password.trim()) {\n      onNext(password);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '400px', margin: '0 auto' }}>\n      <h2>Enter your password</h2>\n      <p style={{ color: '#6c757d', fontSize: '14px' }}>Email: {email}</p>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"password\"\n          value={password}\n          onChange={e => setPassword(e.target.value)}\n          placeholder=\"Enter your password\"\n          style={{\n            width: '100%',\n            padding: '10px',\n            marginBottom: '10px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n          }}\n          required\n        />\n        <button\n          type=\"submit\"\n          style={{\n            width: '100%',\n            padding: '10px',\n            backgroundColor: '#007bff',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n          }}\n        >\n          Next\n        </button>\n      </form>\n    </div>\n  );\n};\n\ninterface InfoTypeSelectProps {\n  onSelectStudent: () => void;\n  onSelectEmployee: () => void;\n}\n\nconst InfoTypeSelect = ({ onSelectStudent, onSelectEmployee }: InfoTypeSelectProps) => {\n  return (\n    <div style={{ padding: '20px', maxWidth: '400px', margin: '0 auto' }}>\n      <h2>Select additional information</h2>\n      <p style={{ color: '#6c757d', marginBottom: '20px' }}>What information would you like to enter?</p>\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\n        <button\n          onClick={onSelectStudent}\n          style={{\n            padding: '15px',\n            backgroundColor: '#28a745',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            fontSize: '16px',\n          }}\n        >\n          \ud83c\udf93 Student Information\n        </button>\n        <button\n          onClick={onSelectEmployee}\n          style={{\n            padding: '15px',\n            backgroundColor: '#17a2b8',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            fontSize: '16px',\n          }}\n        >\n          \ud83d\udcbc Employee Information\n        </button>\n      </div>\n    </div>\n  );\n};\n\ninterface ConfirmSelectionOverlayProps {\n  infoType: 'STUDENT' | 'EMPLOYEE';\n  onConfirm: () => void;\n  onCancel: () => void;\n}\n\nconst ConfirmSelectionOverlay = ({ infoType, onConfirm, onCancel }: ConfirmSelectionOverlayProps) => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        zIndex: 1000,\n      }}\n    >\n      <div\n        style={{\n          backgroundColor: 'white',\n          padding: '30px',\n          borderRadius: '8px',\n          maxWidth: '400px',\n          width: '90%',\n          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n        }}\n      >\n        <h2 style={{ marginTop: 0 }}>\uc120\ud0dd \ud655\uc778</h2>\n        <p style={{ color: '#6c757d', fontSize: '16px' }}>\n          {infoType === 'STUDENT' ? '\ud83c\udf93 \ud559\uc0dd \uc815\ubcf4' : '\ud83d\udcbc \uc9c1\uc7a5\uc778 \uc815\ubcf4'}\ub97c \uc785\ub825\ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c?\n        </p>\n        <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>\n          <button\n            onClick={onCancel}\n            style={{\n              flex: 1,\n              padding: '12px',\n              backgroundColor: '#6c757d',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '14px',\n            }}\n          >\n            \ucde8\uc18c\n          </button>\n          <button\n            onClick={onConfirm}\n            style={{\n              flex: 1,\n              padding: '12px',\n              backgroundColor: infoType === 'STUDENT' ? '#28a745' : '#17a2b8',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '14px',\n            }}\n          >\n            \ud655\uc778\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface SchoolInputProps {\n  onNext: (school: string) => void;\n}\n\nconst SchoolInput = ({ onNext }: SchoolInputProps) => {\n  const [school, setSchool] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (school.trim()) {\n      onNext(school);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '400px', margin: '0 auto' }}>\n      <h2>\ud83c\udf93 Enter school information</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={school}\n          onChange={e => setSchool(e.target.value)}\n          placeholder=\"Enter school name\"\n          style={{\n            width: '100%',\n            padding: '10px',\n            marginBottom: '10px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n          }}\n          required\n        />\n        <button\n          type=\"submit\"\n          style={{\n            width: '100%',\n            padding: '10px',\n            backgroundColor: '#28a745',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n          }}\n        >\n          Complete\n        </button>\n      </form>\n    </div>\n  );\n};\n\ninterface CompanyInputProps {\n  onNext: (company: string) => void;\n}\n\nconst CompanyInput = ({ onNext }: CompanyInputProps) => {\n  const [company, setCompany] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (company.trim()) {\n      onNext(company);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '400px', margin: '0 auto' }}>\n      <h2>\ud83d\udcbc Enter company information</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={company}\n          onChange={e => setCompany(e.target.value)}\n          placeholder=\"Enter company name\"\n          style={{\n            width: '100%',\n            padding: '10px',\n            marginBottom: '10px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n          }}\n          required\n        />\n        <button\n          type=\"submit\"\n          style={{\n            width: '100%',\n            padding: '10px',\n            backgroundColor: '#17a2b8',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n          }}\n        >\n          Complete\n        </button>\n      </form>\n    </div>\n  );\n};\n\ninterface ConfirmStudentProps {\n  email: string;\n  password: string;\n  school: string;\n}\n\nconst ConfirmStudent = ({ email, password, school }: ConfirmStudentProps) => {\n  return (\n    <div style={{ padding: '20px', maxWidth: '400px', margin: '0 auto' }}>\n      <h2>\ud83c\udf89 Student information completed!</h2>\n      <div\n        style={{\n          padding: '20px',\n          backgroundColor: '#f8f9fa',\n          border: '1px solid #dee2e6',\n          borderRadius: '4px',\n          marginTop: '20px',\n        }}\n      >\n        <h3 style={{ marginTop: 0 }}>Your information</h3>\n        <p>\n          <strong>Email:</strong> {email}\n        </p>\n        <p>\n          <strong>Password:</strong> {'*'.repeat(password.length)}\n        </p>\n        <p>\n          <strong>Type:</strong> \ud83c\udf93 Student\n        </p>\n        <p>\n          <strong>School:</strong> {school}\n        </p>\n      </div>\n      <div\n        style={{\n          marginTop: '20px',\n          padding: '15px',\n          backgroundColor: '#d4edda',\n          border: '1px solid #c3e6cb',\n          borderRadius: '4px',\n          textAlign: 'center',\n          color: '#155724',\n        }}\n      >\n        <strong>\u2705 All information has been successfully submitted!</strong>\n      </div>\n    </div>\n  );\n};\n\ninterface ConfirmEmployeeProps {\n  email: string;\n  password: string;\n  company: string;\n}\n\nconst ConfirmEmployee = ({ email, password, company }: ConfirmEmployeeProps) => {\n  return (\n    <div style={{ padding: '20px', maxWidth: '400px', margin: '0 auto' }}>\n      <h2>\ud83c\udf89 Employee information completed!</h2>\n      <div\n        style={{\n          padding: '20px',\n          backgroundColor: '#f8f9fa',\n          border: '1px solid #dee2e6',\n          borderRadius: '4px',\n          marginTop: '20px',\n        }}\n      >\n        <h3 style={{ marginTop: 0 }}>Your information</h3>\n        <p>\n          <strong>Email:</strong> {email}\n        </p>\n        <p>\n          <strong>Password:</strong> {'*'.repeat(password.length)}\n        </p>\n        <p>\n          <strong>Type:</strong> \ud83d\udcbc Employee\n        </p>\n        <p>\n          <strong>Company:</strong> {company}\n        </p>\n      </div>\n      <div\n        style={{\n          marginTop: '20px',\n          padding: '15px',\n          backgroundColor: '#d1ecf1',\n          border: '1px solid #bee5eb',\n          borderRadius: '4px',\n          textAlign: 'center',\n          color: '#0c5460',\n        }}\n      >\n        <strong>\u2705 All information has been successfully submitted!</strong>\n      </div>\n    </div>\n  );\n};\n\nfunction MyFunnelApp() {\n  const funnel = useFunnel<FunnelContext>({\n    id: 'my-funnel-app',\n    initial: {\n      step: 'emailInput',\n      context: {},\n    },\n  });\n\n  return (\n    <funnel.Render\n      emailInput={funnel.Render.with({\n        events: {\n          submitEmail: (email: string, { history }: any) => history.push('passwordInput', { email }),\n        },\n        render({ dispatch }: any) {\n          return <EmailInput onNext={email => dispatch('submitEmail', email)} />;\n        },\n      })}\n      passwordInput={funnel.Render.with({\n        events: {\n          submitPassword: (password: string, { context, history }: any) =>\n            history.push('selectInfoType', { ...context, password }),\n        },\n        render({ context, dispatch }: any) {\n          return <PasswordInput email={context.email} onNext={password => dispatch('submitPassword', password)} />;\n        },\n      })}\n      selectInfoType={funnel.Render.with({\n        events: {\n          selectStudent: (_: any, { history }: any) => history.push('confirmSelection', { infoType: 'STUDENT' }),\n          selectEmployee: (_: any, { history }: any) => history.push('confirmSelection', { infoType: 'EMPLOYEE' }),\n        },\n        render({ dispatch }: any) {\n          return (\n            <InfoTypeSelect\n              onSelectStudent={() => dispatch('selectStudent')}\n              onSelectEmployee={() => dispatch('selectEmployee')}\n            />\n          );\n        },\n      })}\n      confirmSelection={funnel.Render.overlay({\n        render({ context, history }: any) {\n          return (\n            <ConfirmSelectionOverlay\n              infoType={context.infoType}\n              onConfirm={() => history.push(context.infoType === 'STUDENT' ? 'studentInfo' : 'employeeInfo')}\n              onCancel={() => history.replace('selectInfoType')}\n            />\n          );\n        },\n      })}\n      studentInfo={({ history }: any) => (\n        <SchoolInput\n          onNext={school =>\n            history.push('complete', (prev: any) => ({\n              ...prev,\n              school,\n            }))\n          }\n        />\n      )}\n      employeeInfo={({ history }: any) => (\n        <CompanyInput\n          onNext={company =>\n            history.push('complete', (prev: any) => ({\n              ...prev,\n              company,\n            }))\n          }\n        />\n      )}\n      complete={({ context }: any) =>\n        context.infoType === 'STUDENT' ? (\n          <ConfirmStudent email={context.email} password={context.password} school={context.school} />\n        ) : (\n          <ConfirmEmployee email={context.email} password={context.password} company={context.company} />\n        )\n      }\n    />\n  );\n}\n\nexport const FunnelTestPage = () => {\n  return (\n    <div>\n      <div\n        style={{\n          padding: '10px 20px',\n          backgroundColor: '#343a40',\n          color: 'white',\n          marginBottom: '20px',\n          textAlign: 'center',\n        }}\n      >\n        <h1 style={{ margin: 0 }}>Funnel Test Page</h1>\n        <p style={{ margin: '5px 0 0', fontSize: '14px', opacity: 0.8 }}>@use-funnel/react-router-dom example</p>\n      </div>\n      <MyFunnelApp />\n    </div>\n  );\n};\n\n")))}u.isMDXComponent=!0}}]);